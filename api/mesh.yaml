openapi: 3.0.0
info:
  version: v1alpha1
  title: NGINX Service Mesh API
  description: |
    Use the NGINX Service Mesh API to configure NGINX Service Mesh, list Service resources that participate in the mesh, and to inject your Kubernetes resources with the NGINX Service Mesh sidecar proxy.

    > WARNING: The NGINX Service Mesh API is in beta release status and is not recommended for use in client-side automation. 
    > The objects described here are subject to change as the API evolves. No guarantee of backwards compatibility is made.
servers:
  - description: API server base
    url: /apis/nsm.nginx.com/v1alpha1
paths:
  /config:
    x-f5-experimental: true
    get:
      x-f5-experimental: true
      summary: Get NGINX Service Mesh configuration
      description: Returns the configuration object of the installed NGINX Service Mesh.
      operationId: getConfig
      responses:
        "200":
          description: Successfully retrieved the NGINX Service Mesh configuration object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshConfig'
              example:
                {
                  "accessControlMode": "allow",
                  "api": {
                    "address": "nginx-mesh-api.nginx-mesh",
                    "containerPort": 8443,
                    "port": 443
                  },
                  "autoInjectorPort": 9443,
                  "clientMaxBodySize": "1m",
                  "environment": "kubernetes",
                  "loadBalancingMethod": "round_robin",
                  "mtls": {
                    "caKeyType": "ec-p256",
                    "caTTL": "720h",
                    "mode": "strict",
                    "svidTTL": "1h"
                  },
                  "namespace": "nginx-mesh",
                  "nginxErrorLogLevel": "info",
                  "nginxLogFormat": "default",
                  "prometheusAddress": "prometheus.nsm-monitoring.svc:9090",
                  "proxy": {
                    "ports": {
                      "incoming": 8888,
                      "incomingGrpc": 8891,
                      "incomingGrpcPermissive": 8893,
                      "incomingNotInKeyval": 8903,
                      "incomingPermissive": 8890,
                      "incomingRedirect": 8901,
                      "incomingTcp": 8904,
                      "incomingTcpDeny": 8905,
                      "incomingTcpPermissive": 8907,
                      "outgoingUdp": 8908,
                      "incomingUdp": 8909,
                      "metrics": 8887,
                      "outgoing": 8889,
                      "outgoingDefaultEgress": 8894,
                      "outgoingGrpc": 8892,
                      "outgoingNotInKeyval": 8902,
                      "outgoingRedirect": 8900,
                      "outgoingTcp": 8906,
                      "plusApi": 8886,
                      "redirectHealthPort": 8895,
                      "redirectHealthPortHTTPS": 8896
                    },
                    "transparent": false
                  },
                  "registryKeyName": "",
                  "sidecarImage": {
                    "image": "docker-registry.nginx.com/nsm/nginx-mesh-sidecar:1.5.0",
                    "name": "nginx-mesh-sidecar"
                  },
                  "sidecarInitImage": {
                    "image": "docker-registry.nginx.com/nsm/nginx-mesh-init:1.5.0",
                    "name": "nginx-mesh-init"
                  },
                  "telemetry": {
                    "exporters": {
                      "otlp": {
                        "host": "otel-collector.nsm-monitoring.svc",
                        "port": 4317
                      }
                    },
                    "samplerRatio": 0.01
                  },
                  "trustDomain": "example.org"
                }
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
    patch:
      x-f5-experimental: true
      summary: Update NGINX Service Mesh Configuration
      description: Updates the NGINX Service Mesh configuration object.
      operationId: patchConfig
      requestBody:
        description: Defines the updates to make to the NGINX Service Mesh configuration object. The updates can be sent as a single Patch Config object or an array of Patch Config objects.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PatchConfig'
                - type: array
                  items:
                    $ref: '#/components/schemas/PatchConfig'
            example:
              [
                {
                  "op": "replace",
                  "field": {
                    "isAutoInjectEnabled": false
                  }
                },
                {
                  "op": "add",
                  "field": {
                    "enabledNamespaces": [ "prod", "staging" ]
                  }
                }
              ]
      responses:
        "200":
          description: Successfully updated the NGINX Service Mesh configuration object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeshConfig'
              example:
                {
                  "accessControlMode": "allow",
                  "api": {
                    "address": "nginx-mesh-api.nginx-mesh",
                    "containerPort": 8443,
                    "port": 443
                  },
                  "autoInjectorPort": 9443,
                  "clientMaxBodySize": "1m",
                  "environment": "kubernetes",
                  "enabledNamespaces": [
                      "prod",
                      "staging"
                ],
                  "isAutoInjectEnabled": false,
                  "loadBalancingMethod": "round_robin",
                  "mtls": {
                    "caKeyType": "ec-p256",
                    "caTTL": "720h",
                    "mode": "strict",
                    "svidTTL": "1h"
                  },
                  "namespace": "nginx-mesh",
                  "nginxErrorLogLevel": "info",
                  "nginxLogFormat": "default",
                  "prometheusAddress": "prometheus.nsm-monitoring.svc:9090",
                  "proxy": {
                    "ports": {
                      "incoming": 8888,
                      "incomingGrpc": 8891,
                      "incomingGrpcPermissive": 8893,
                      "incomingNotInKeyval": 8903,
                      "incomingPermissive": 8890,
                      "incomingRedirect": 8901,
                      "incomingTcp": 8904,
                      "incomingTcpDeny": 8905,
                      "incomingTcpPermissive": 8907,
                      "outgoingUdp": 8908,
                      "incomingUdp": 8909,
                      "metrics": 8887,
                      "outgoing": 8889,
                      "outgoingDefaultEgress": 8894,
                      "outgoingGrpc": 8892,
                      "outgoingNotInKeyval": 8902,
                      "outgoingRedirect": 8900,
                      "outgoingTcp": 8906,
                      "plusApi": 8886,
                      "redirectHealthPort": 8895,
                      "redirectHealthPortHTTPS": 8896
                    },
                    "transparent": false
                  },
                  "registryKeyName": "",
                  "sidecarImage": {
                    "image": "docker-registry.nginx.com/nsm/nginx-mesh-sidecar:1.5.0",
                    "name": "nginx-mesh-sidecar"
                  },
                  "sidecarInitImage": {
                    "image": "docker-registry.nginx.com/nsm/nginx-mesh-init:1.5.0",
                    "name": "nginx-mesh-init"
                  },
                  "telemetry": {
                    "exporters": {
                      "otlp": {
                        "host": "otel-collector.nsm-monitoring.svc",
                        "port": 4317
                      }
                    },
                    "samplerRatio": 0.01
                  },
                  "trustDomain": "example.org"
                }
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "403":
          $ref: '#/components/responses/Forbidden'
        "500":
          $ref: '#/components/responses/InternalServerError'
components:
  responses:
    BadRequest:
      description: Bad input parameter, or unsupported configuration. Retry after addressing configuration issue or checking for typos.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            {
              message: "invalid configuration: enabled namespaces should not be set when auto injection is enabled",
              code: 7892
            }
    Unauthorized:
      description: |
        User authentication is invalid or missing.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            {
              message: "unauthorized: make sure you are authenticated with the Kubernetes API server",
              code: 7898
            }
    Forbidden:
      description: |
        The request failed due to insufficient privileges.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            {
              message: "forbidden: user is not authorized",
              code: 7893
            }
    InternalServerError:
      description: The request cannot be processed because of an internal server error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorModel'
          example:
            {
              message: "could not get Pod collection",
              code: 7899
            }
  schemas:
    MeshConfig:
      type: object
      description: |
        Holds combined configuration required to run the NGINX Service Mesh control plane
        and the data plane.
      properties:
        api:
          $ref: '#/components/schemas/APIConfig'
        proxy:
          $ref: '#/components/schemas/ProxyConfig'
        namespace:
          type: string
          description: The namespace where the NGINX Service Mesh control plane is installed.
          example: "nginx-mesh"
        environment:
          type: string
          description: The environment that the NGINX Service Mesh control plane is installed in.
          example: "kubernetes"
          enum:
            - "kubernetes"
            - "openshift"
        isAutoInjectEnabled:
          type: boolean
          description: Whether or not automatic injection of the NGINX Service Mesh sidecar is enabled globally.
          example: true
        enabledNamespaces:
          type: array
          description: A list of namespaces where automatic injection is enabled. To set this field, the isAutoInjectEnabled field must be false.
          example: [ ]
          items:
            type: string
        isUDPEnabled:
          type: boolean
          description: Enable UDP traffic proxying.
          example: false
        sidecarImage:
          $ref: '#/components/schemas/Image'
        sidecarInitImage:
          $ref: '#/components/schemas/Image'
        autoInjectorPort:
          type: integer
          description: The port that the automatic injection webhook binds to.
          example: 9443
        accessControlMode:
          type: string
          description: The access control mode of NGINX Service Mesh.
          example: "allow"
          enum:
          - "allow"
          - "deny"
        prometheusAddress:
          type: string
          description: The address of the Prometheus server deployment.
          example: "prometheus.nginx-mesh.svc.cluster.local:9090"
        trustDomain:
          type: string
          description: The trust domain of the NGINX Service Mesh.
          example: "example.org"
        registryKeyName:
          type: string
          description: The name of the registry key that is used to pull the NGINX Service Mesh docker images.
          example: ""
        mtls:
          $ref: '#/components/schemas/MtlsConfig'
        telemetry:
          $ref: '#/components/schemas/TelemetryConfig'
        loadBalancingMethod:
          type: string
          description: The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
          example: "least_time"
          enum:
          - "round_robin"
          - "least_conn"
          - "least_time"
          - "least_time last_byte"
          - "least_time last_byte inflight"
          - "random"
          - "random two"
          - "random two least_conn"
          - "random two least_time"
          - "random two least_time=last_byte"
        nginxErrorLogLevel:
          type: string
          description: The error log level of the NGINX Service Mesh sidecar proxies.
          example: "warn"
          enum:
          - "debug"
          - "info"
          - "notice"
          - "warn"
          - "error"
          - "crit"
          - "alert"
          - "emerg"
        nginxLogFormat:
          type: string
          description: The log format of the NGINX Service Mesh sidecar proxies.
          example: "default"
          enum:
          - "default"
          - "json"
        clientMaxBodySize:
          type: string
          description: The maximum allowed size of the client request body.
          example: "1m"
          pattern: "^\\d+[kKmMgG]?$"
      required:
        - api
        - proxy
        - namespace
        - environment
        - isUDPEnabled
        - sidecarImage
        - sidecarInitImage
        - autoInjectorPort
        - accessControlMode
        - prometheusAddress
        - trustDomain
        - registryKeyName
        - mtls
        - injection
        - telemetry
        - loadBalancingMethod
        - nginxErrorLogLevel
        - nginxLogFormat
        - clientMaxBodySize
    APIConfig:
      type: object
      description: The configuration of the NGINX Service Mesh API.
      properties:
        address:
          type: string
          description: The Kubernetes DNS name of the NGINX Service Mesh API.
          example: "nginx-mesh-api.nginx-mesh"
        port:
          type: integer
          description: The port of the NGINX Service Mesh API.
          example: 443
        containerPort:
          type: integer
          description: The container port of the NGINX Service Mesh API.
          example: 8443
      required:
        - address
        - port
        - containerPort
    ProxyConfig:
      type: object
      description: The configuration of the NGINX Service Mesh sidecar proxies.
      properties:
        ports:
          $ref: '#/components/schemas/PortsConfig'
        transparent:
          type: boolean
          description: Whether or not the NGINX Service Mesh sidecar proxies are running in transparent mode. Transparent mode means that the sidecar proxies are passing the traffic through to the destination without applying any rules to the traffic.
          example: false
      required:
        - ports
        - transparent
    PortsConfig:
      type: object
      description: The ports that the NGINX Service Mesh sidecar proxies listen on.
      properties:
        outgoing:
          type: integer
          description: The outgoing HTTP port.
          example: 8889
        outgoingGrpc:
          type: integer
          description: The outgoing gRPC port.
          example: 8892
        outgoingNotInKeyval:
          type: integer
          description: The outgoing port for destinations that are not a part of NGINX Service Mesh.
          example: 8902
        outgoingRedirect:
          type: integer
          description: The outgoing redirect port. This port redirects requests to another port on the sidecar proxy based on the protocol of the request.
          example: 8900
        outgoingTcp:
          type: integer
          description: The outgoing TCP port.
          example: 8906
        outgoingDefaultEgress:
          type: integer
          description: The outgoing traffic port for egress traffic when the NGINX Plus Ingress Controller is deployed as an egress controller.
          example: 8894
        incoming:
          type: integer
          description: The incoming HTTP port.
          example: 8888
        incomingPermissive:
          type: integer
          description: The incoming HTTP port when the mTLS mode of the sidecar proxy is set to permissive.
          example: 8890
        incomingGrpc:
          type: integer
          description: The incoming gRPC port.
          example: 8891
        incomingGrpcPermissive:
          type: integer
          description: The incoming gRPC port when the mTLS mode of the sidecar proxy is set to permissive.
          example: 8893
        incomingNotInKeyval:
          type: integer
          description: The incoming port that handles requests from Services not in the NGINX Service Mesh.
          example: 8903
        incomingRedirect:
          type: integer
          description: The incoming redirect port. This port redirects requests to another port on the sidecar proxy based on the protocol of the request.
          example: 8901
        incomingTcp:
          type: integer
          description: The incoming TCP port.
          example: 8904
        incomingTcpDeny:
          type: integer
          description: The incoming TCP deny port. This port denies TCP traffic if it is not a part of NGINX Service Mesh or if the access to the sidecar is not allowed.
          example: 8905
        incomingTcpPermissive:
          type: integer
          description: The incoming TCP port when the mTLS mode of the sidecar proxy is set to perissive.
          example: 8907
        outgoingUdp:
          type: integer
          description: The outgoing UDP port.
          example: 8908
        incomingUdp:
          type: integer
          description: The incoming UDP port.
          example: 8909
        plusApi:
          type: integer
          description: The port for the NGINX Plus API. This API is not accessible outside of the NGINX Service Mesh sidecar container.
          example: 8886
        metrics:
          type: integer
          description: The Prometheus metrics port.
          example: 8887
        redirectHealthPort:
          type: integer
          description: This port redirects HTTP health probes to the application container.
          example: 8895
        redirectHealthPortHTTPS:
          type: integer
          description: This port redirects HTTPS health probes to the application container.
          example: 8896
      required:
        - outgoing
        - outgoingGrpc
        - outgoingNotInKeyval
        - outgoingRedirect
        - outgoingTcp
        - outgoingDefaultEgress
        - incoming
        - incomingPermissive
        - incomingGrpc
        - incomingGrpcPermissive
        - incomingNotInKeyval
        - incomingRedirect
        - incomingTcp
        - incomingTcpDeny
        - incomingTcpPermissive
        - outgoingUdp
        - incomingUdp
        - plusApi
        - metrics
        - redirectHealthPort
        - redirectHealthPortHTTPS
    Image:
      type: object
      description: A container image, comprised of an image name and image tag.
      properties:
        name:
          type: string
          description: The name of the image.
          example: "docker-registry.nginx.com/nsm/nginx-mesh-sidecar"
        image:
          type: string
          description: The tag of the image.
          example: "1.3.0"
      required:
        - name
        - image
      additionalProperties: false
    TelemetryConfig:
      type: object
      description: The configuration for telemetry.
      properties:
        exporters:
          $ref: '#/components/schemas/ExportersConfig'
        samplerRatio:
          type: number
          description: The percentage of traces that are processed and exported to the telemetry backend.
          format: float
          minimum: 0
          maximum: 1
      additionalProperties: false
    ExportersConfig:
      type: object
      description: The configuration of exporters to send telemetry data to.
      properties:
        otlp:
          $ref: '#/components/schemas/OtlpExporterConfig'
      minProperties: 1  
      additionalProperties: false
    OtlpExporterConfig:
      type: object
      description: The configuration for an OTLP gRPC exporter.
      properties:
        host:
          type: string
          description: The host of the OpenTelemetry gRPC exporter to connect to.
          minLength: 1
        port:
          type: integer
          description: The port of the OpenTelemetry gRPC exporter to connect to.
          minimum: 0
          maximum: 65535
      required:
      - host
      - port
      additionalProperties: false
    MtlsConfig:
      type: object
      description: The configuration for mTLS.
      properties:
        mode:
          type: string
          description: The mTLS mode of NGINX Service Mesh.
          example: "permissive"
          enum:
          - "off"
          - "permissive"
          - "strict"
        caTTL:
          type: string
          description: The CA/signing key TTL in hours(h). Min value 24h. Max value 999999h.
          example: "720h"
          pattern: "^1[0-9]{2,5}(h)|2[4-9](h)|2[0-9][0-9]{1,5}(h)|[3-9][0-9]{1,5}(h)$"
        svidTTL:
          type: string
          description: The TTL of certificates issued to workloads in hours(h) or minutes(m). Max value is 999999.
          example: "1h"
          pattern: "^[1-9][0-9]{0,5}(h|m)$"
        caKeyType:
          type: string
          description: The key type used for the SPIRE Server CA.
          example: "ec-p256"
          enum:
          - "ec-p256"
          - "ec-p384"
          - "rsa-2048"
          - "rsa-4096"
      additionalProperties: false
    PatchConfig:
      type: object
      description: The configuration object that holds the updates to be made to the NGINX Service Mesh configuration.
      properties:
        op:
          type: string
          description: The type of operation to be performed on the NGINX Service Mesh configuration. Values in the NGINX Service Mesh configuration can be added, removed, or replaced.
          enum:
          - add
          - remove
          - replace
        field:
          type: object
          properties:
            accessControlMode:
              type: string
              description: The access control mode of NGINX Service Mesh.
              enum:
              - "allow"
              - "deny"
            prometheusAddress:
              type: string
              description: The address of the Prometheus server. Must be reachable from the Kubernetes cluster that NGINX Service Mesh is installed in.
              example: "prometheus-server.prometheus-namespace.svc.cluster.local:9090"
            isAutoInjectEnabled:
              type: boolean
              description: Whether or not automatic injection of the NGINX Service Mesh sidecar is enabled. This value can be overridden on a per-Pod basis with a Pod annotation.
              example: true
            enabledNamespaces:
              type: array
              description: A list of namespaces where automatic injection is enabled. To set this field, the isAutoInjectEnabled field must be false.
              example: [ ]
              items:
                type: string
            loadBalancingMethod:
              type: string
              description: The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
              enum:
              - "round_robin"
              - "least_conn"
              - "least_time"
              - "least_time last_byte"
              - "least_time last_byte inflight"
              - "random"
              - "random two"
              - "random two least_conn"
              - "random two least_time"
              - "random two least_time=last_byte"
            nginxErrorLogLevel:
              type: string
              description: The error log level of the NGINX Service Mesh sidecar proxies.
              enum:
              - "debug"
              - "info"
              - "notice"
              - "warn"
              - "error"
              - "crit"
              - "alert"
              - "emerg"
            nginxLogFormat:
              type: string
              description: The log format of the NGINX Service Mesh sidecar proxies.
              enum:
              - "default"
              - "json"
            clientMaxBodySize:
              type: string
              description: The maximum allowed size of the client request body.
              pattern: "^\\d+[kKmMgG]?$"
            mtls:
              $ref: '#/components/schemas/MtlsConfig'
            telemetry:
              $ref: '#/components/schemas/TelemetryConfig'
          additionalProperties: false
      additionalProperties: false
      required:
      - op
      - field
    Service:
      type: object
      description: The configuration of a Service resource in NGINX Service Mesh.
      properties:
        name:
          type: string
          description: The Kubernetes Service name.
          example: "productpage"
          minLength: 1
        addresses:
          type: array
          description: The IP addresses of the Endpoints of the Kubernetes Service.
          example: ["10.36.0.12", "10.36.1.13"]
          minItems: 1
          items:
            type: string
            minLength: 1
        ports:
          type: array
          description: The ports of the Kubernetes Service.
          minItems: 1
          items:
            $ref: '#/components/schemas/ServicePort'
        namespace:
          type: string
          description: The namespace of the Kubernetes Service.
          example: "default"
        serviceIP:
          type: string
          description: The IP address of the Kubernetes Service.
          example: "10.40.3.120"
      additionalProperties: false
      required:
        - name
        - addresses
        - ports
    ServicePort:
      type: object
      description: A representation of a Service Port in NGINX Service Mesh. Contains the port number and the protocol.
      properties:
        port:
          type: integer
          description: The port number.
          example: 8080
          format: int32
        protocol:
          type: string
          description: The protocol of the traffic.
          example: "http"
          minLength: 1
      additionalProperties: false
      required:
      - port
      - protocol
    ErrorModel:
      type: object
      required:
      - message
      - code
      properties:
        message:
          type: string
          example: "Error doing <action>."
          description: |
            A human-readable message, in English, that describes the error.
        code:
          type: integer
          example: 1234567
          description: |
            A numeric error code that can be used to identify errors for support purposes.
        details:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      type: object
      required:
      - description
      properties:
        description:
          type: string
          example: "Error doing <action>: <reason for error>. This can lead to <potential consequences>. Try <action> to resolve the issue."
          description: |
            A detailed error message returned by the server.

            These messages contain the following information, where applicable:

            - What happened.
            - Why it happened.
            - What the consequences are (if any).
            - Recommended action to take to resolve the issue.
