{
    "accessControlMode": {{ quote .Values.accessControlMode }},
    "api": {
      "address": {{ printf "nginx-mesh-api.%s" .Release.Namespace | quote }},
      "containerPort": 8443,
      "port": 443
    },
    "autoInjectorPort": 9443,
    "clientMaxBodySize": {{ quote .Values.clientMaxBodySize }},
    "environment": {{ quote .Values.environment }},
    "isUDPEnabled": {{ .Values.enableUDP }},
    "enabledNamespaces": [{{ if .Values.enabledNamespaces }} {{ range $idx, $elem := .Values.enabledNamespaces }}{{if $idx}},{{end}}{{quote .}}{{end}} {{ else }} {{ range $idx, $elem := .Values.autoInjection.enabledNamespaces }}{{if $idx}},{{end}}{{quote .}}{{end}} {{ end }}],
    "isAutoInjectEnabled": {{ if eq .Values.disableAutoInjection .Values.autoInjection.disable }} {{ not .Values.disableAutoInjection }} {{ else if .Values.disableAutoInjection }} {{ not .Values.disableAutoInjection }} {{ else }} {{ not .Values.autoInjection.disable }} {{ end }},
    "injection": {
      "disabledNamespaces": [{{ range $idx, $elem := .Values.autoInjection.disabledNamespaces }}{{if $idx}},{{end}}{{quote .}}{{end}}],
      "enabledNamespaces": [{{ if .Values.enabledNamespaces }} {{ range $idx, $elem := .Values.enabledNamespaces }}{{if $idx}},{{end}}{{quote .}}{{end}} {{ else }} {{ range $idx, $elem := .Values.autoInjection.enabledNamespaces }}{{if $idx}},{{end}}{{quote .}}{{end}} {{ end }}],
      "isAutoInjectEnabled": {{ if eq .Values.disableAutoInjection .Values.autoInjection.disable }} {{ not .Values.disableAutoInjection }} {{ else if .Values.disableAutoInjection }} {{ not .Values.disableAutoInjection }} {{ else }} {{ not .Values.autoInjection.disable }} {{ end }}
    },
    "loadBalancingMethod": {{ quote .Values.nginxLBMethod }},
    "mtls": {
      "mode": {{ quote .Values.mtls.mode }},
      "caTTL": {{ quote .Values.mtls.caTTL }},
      "svidTTL": {{ quote .Values.mtls.svidTTL }},
      "caKeyType": {{ quote .Values.mtls.caKeyType }}
    },
    "namespace": {{ quote .Release.Namespace }},
    "nginxErrorLogLevel": {{ quote .Values.nginxErrorLogLevel }},
    "nginxLogFormat": {{ quote .Values.nginxLogFormat }},
    "prometheusAddress": {{ quote .Values.prometheusAddress }},
    "proxy": {
      "ports": {
        "incoming": 8888,
        "incomingGrpc": 8891,
        "incomingGrpcPermissive": 8893,
        "incomingNotInKeyval": 8903,
        "incomingPermissive": 8890,
        "incomingRedirect": 8901,
        "incomingTcp": 8904,
        "incomingTcpDeny": 8905,
        "incomingTcpPermissive": 8907,
        "outgoingUdp": 8908,
        "incomingUdp": 8909,
        "metrics": 8887,
        "outgoing": 8889,
        "outgoingDefaultEgress": 8894,
        "outgoingGrpc": 8892,
        "outgoingNotInKeyval": 8902,
        "outgoingRedirect": 8900,
        "outgoingTcp": 8906,
        "plusApi": 8886,
        "redirectHealthPort": 8895,
        "redirectHealthPortHTTPS": 8896
      },
      "transparent": false
    },
    "registryKeyName": {{ if (include "docker-config-json" .) }}{{ include "registry-key-name" . | quote }}{{ else }}""{{ end }},
    "sidecarImage": {
      "image": {{ printf "%s/nginx-mesh-sidecar:%s" .Values.registry.server .Values.registry.imageTag | quote }},
      "name": "nginx-mesh-sidecar"
    },
    "sidecarInitImage": {
      "image": {{ printf "%s/nginx-mesh-init:%s" .Values.registry.server .Values.registry.imageTag | quote }},
      "name": "nginx-mesh-init"
    },
    "tracing": {{ if .Values.tracing }}{
      "backend": {{ quote .Values.tracing.backend }},
      "backendAddress": {{ quote .Values.tracing.address }},
      "sampleRate": {{ .Values.tracing.sampleRate }}
    },{{ else }}{},{{ end }}
    "telemetry": {{ if .Values.telemetry }}{
        "exporters": {
            "otlp": {
                "host": {{ quote .Values.telemetry.exporters.otlp.host }},
                "port": {{ .Values.telemetry.exporters.otlp.port }}
            }
        },
        "samplerRatio": {{ .Values.telemetry.samplerRatio }}
    },{{ else }}{},{{ end }}
    "trustDomain": {{ quote .Values.mtls.trustDomain }}
  }
