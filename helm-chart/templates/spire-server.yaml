---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
imagePullSecrets:
- name: {{ include "registry-key-name" . }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-server.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
rules:
- apiGroups:
  - ''
  resources:
  - pods
  - nodes
  verbs:
  - get
- apiGroups:
  - ''
  resources:
  - configmaps
  resourceNames:
  - spire-bundle
  verbs:
  - get
  - patch
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - apiregistration.k8s.io
  resources:
  - apiservices
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - patch
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-server.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-server.security.builtin.nsm.nginx
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: {{ .Release.Namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
rules:
- apiGroups:
  - ''
  resources:
  - endpoints
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - spiffeid.spiffe.io
  resources:
  - spiffeids
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - spiffeid.spiffe.io
  resources:
  - spiffeids/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar.security.builtin.nsm.nginx
subjects:
- kind: ServiceAccount
  name: spire-server
  namespace: {{ .Release.Namespace }}
{{- if (or (include "ua-secret-name" .) (include "ua-vault-env-name" .)) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
type: Opaque
data:
  {{- if (include "ua-secret-name" .) }}
  {{ include "ua-secret-name" . }}: {{ include "ua-upstream-key" . }}{{ end }}
  {{- if (include "ua-vault-env-name" .) }}
  {{ include "ua-vault-env-name" . }}: {{ include "ua-vault-env-value" . }}{{ end }}
{{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-bundle
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
data:
  server.conf: {{ tpl (.Files.Get "configs/spire-server.conf") . | quote }}
  {{ if (include "ua-upstream-cert" .) -}}
  {{ include "ua-upstream-cert" . }}{{ end }}
  {{ if (include "ua-upstream-client-cert" .) -}}
  {{ include "ua-upstream-client-cert" . }}{{ end }}
  {{ if (include "ua-upstream-bundle" .) -}}
  {{ include "ua-upstream-bundle" . }}{{ end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-workload-registrar
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
data:
  k8s-workload-registrar.conf: {{ tpl (.Files.Get "configs/k8s-workload-registrar.conf") . | quote }}
---
{{- $caKey := genPrivateKey "ecdsa"}}
{{- $caCrt := genCAWithKey "K8S WORKLOAD REGISTRAR CA" 9999 $caKey }}
{{- $serverKey := genPrivateKey "ecdsa" }}
{{- $serverCrt := genSignedCertWithKey "K8S WORKLOAD REGISTRAR SERVER" nil nil 9999 $caCrt $serverKey }}
apiVersion: v1
kind: Secret
metadata:
  name: k8s-workload-registrar-secret
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
type: Opaque
data:
  tls.crt: {{ b64enc $serverCrt.Cert | quote }}
  tls.key: {{ b64enc $serverKey | quote }}
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  type: ClusterIP
  ports:
  - name: grpc
    protocol: TCP
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
---
apiVersion: v1
kind: Service
metadata:
  name: k8s-workload-registrar
  labels:
    app.kubernetes.io/name: k8s-workload-registrar
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  ports:
  - name: webhook
    protocol: TCP
    port: 443
    targetPort: 9443
  selector:
    app.kubernetes.io/name: spire-server
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: k8s-workload-registrar.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
webhooks:
- name: k8s-workload-registrar.{{ .Release.Namespace }}.svc
  clientConfig:
    caBundle: {{ b64enc $caCrt.Cert | quote }}
    service:
      name: k8s-workload-registrar
      namespace: {{ .Release.Namespace }}
      path: "/validate-spiffeid-spiffe-io-v1beta1-spiffeid"
  sideEffects: None
  admissionReviewVersions:
  - v1
  - v1beta1
  failurePolicy: Ignore
  rules:
  - apiGroups:
    - spiffeid.spiffe.io
    apiVersions:
    - v1beta1
    operations:
    - CREATE
    - UPDATE
    - DELETE
    resources:
    - spiffeids
    scope: Namespaced
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: spiffeids.spiffeid.spiffe.io
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
spec:
  group: spiffeid.spiffe.io
  scope: Namespaced
  names:
    kind: SpiffeID
    listKind: SpiffeIDList
    plural: spiffeids
    singular: spiffeid
  versions:
  - name: v1beta1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            properties:
              dnsNames:
                type: array
                items:
                  type: string
              parentId:
                type: string
              selector:
                type: object
                properties:
                  arbitrary:
                    items:
                      type: string
                    type: array
                  containerImage:
                    type: string
                  containerName:
                    type: string
                  namespace:
                    type: string
                  nodeName:
                    type: string
                  podLabel:
                    additionalProperties:
                      type: string
                    type: object
                  podName:
                    type: string
                  podUid:
                    type: string
                  serviceAccount:
                    type: string
                  cluster:
                    type: string
                  agent_node_uid:
                    type: string
              spiffeId:
                type: string
            required:
            - parentId
            - selector
            - spiffeId
          status:
            type: object
            properties:
              entryId:
                type: string
---
apiVersion: apps/v1
{{- if eq .Values.mtls.persistentStorage "on" }}
kind: StatefulSet
{{- else }}
kind: Deployment
{{- end }}
metadata:
  name: spire-server
  labels:
    app.kubernetes.io/name: spire-server
    app.kubernetes.io/part-of: nginx-service-mesh
    {{- with .Values.spireServer.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: spire-server
      app.kubernetes.io/part-of: nginx-service-mesh
      {{- with .Values.spireServer.labels }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- if .Values.spireServer.storage.persistent }}
  serviceName: spire-server
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spire-server
        app.kubernetes.io/part-of: nginx-service-mesh
        {{- with .Values.spireServer.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      containers:
        - name: spire-server
          image: {{ include "spire.image-server" . }}/spire-server:0.12.3
          imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
          args:
            - '-config'
            - /run/spire/config/server.conf
          ports:
            - name: spire-server
              protocol: TCP
              containerPort: 8081
          {{- if (include "ua-vault-env-name" .) }}
          env:
          - name: {{ include "ua-vault-env-name" . }}
            valueFrom:
              secretKeyRef:
                name: spire-server
                key: {{ include "ua-vault-env-name" . }}
          {{- end }}
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            {{- if (include "ua-secret-mountpath" .) }}
            - name: spire-secrets
              mountPath: {{ include "ua-secret-mountpath" . }}
              readOnly: true
            {{- end }}
            {{- if .Values.spireServer.storage.persistent }}
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
            {{- end }}
            - name: spire-server-socket
              mountPath: /run/spire/sockets
              readOnly: false
          livenessProbe:
            exec:
              command:
                - /opt/spire/bin/spire-server
                - healthcheck
                - '-shallow'
                - '-registrationUDSPath'
                - /run/spire/sockets/spire-registration.sock
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command:
                - /opt/spire/bin/spire-server
                - healthcheck
                - '-registrationUDSPath'
                - /run/spire/sockets/spire-registration.sock
            initialDelaySeconds: 5
            periodSeconds: 5
        - name: k8s-workload-registrar
          image: {{ include "spire.image-server" . }}/k8s-workload-registrar:0.12.3
          imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
          args:
            - '-config'
            - /run/spire/config/k8s-workload-registrar.conf
          ports:
            - name: webhook
              protocol: TCP
              containerPort: 9443
          volumeMounts:
            - name: k8s-workload-registrar-config
              mountPath: /run/spire/config
              readOnly: true
            - name: k8s-workload-registrar-secret
              mountPath: /tmp/k8s-webhook-server/serving-certs
              readOnly: true
            - name: spire-server-socket
              mountPath: /run/spire/sockets
              readOnly: true
          {{- with .Values.spireServer.tolerations }}
          tolerations:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.spireServer.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.spireServer.nodeSelector }}
          nodeSelector:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.spireServer.securityContext }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: spire-config
          configMap:
            name: spire-server
        {{- if (include "ua-secret-name" .) }}
        - name: spire-secrets
          secret:
            secretName: spire-server
            items:
            - key: {{ include "ua-secret-name" . }}
              path: {{ include "ua-secret-name" . }}
        {{- end }}
        - name: spire-server-socket
          hostPath:
            path: /run/spire/sockets
            type: DirectoryOrCreate
        - name: k8s-workload-registrar-config
          configMap:
            name: k8s-workload-registrar
        - name: k8s-workload-registrar-secret
          secret:
            secretName: k8s-workload-registrar-secret
  {{- if .Values.spireServer.storage.persistent }}
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: {{ .Release.Namespace }}
        labels:
          {{- with .Values.spireServer.labels }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
      spec:
        {{- if .Values.spireServer.storage.storageClassName }}
        storageClassName: {{ .Values.spireServer.storage.storageClassName }}
        {{- end }}
        {{- if .Values.spireServer.storage.volumeMode }}
        volumeMode: {{ .Values.spireServer.storage.volumeMode }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ default "1Gi" .Values.spireServer.storage.size }}
  {{- end }}
