---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spire-agent
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
  {{- if eq .Values.environment "openshift" }}
  annotations:
    "helm.sh/resource-policy": keep
  {{- end }}
imagePullSecrets:
- name: {{ include "registry-key-name" . }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spire-agent.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
rules:
- apiGroups:
  - ''
  resources:
  - pods
  - nodes
  - nodes/proxy
  verbs:
  - get
  - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spire-agent.security.builtin.nsm.nginx
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: spire-agent.security.builtin.nsm.nginx
subjects:
- kind: ServiceAccount
  name: spire-agent
  namespace: {{ .Release.Namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-agent
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
data:
  agent.conf: {{ tpl (.Files.Get "configs/spire-agent.conf") . | quote }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: spire-agent
  labels:
    app.kubernetes.io/name: spire-agent
    app.kubernetes.io/part-of: nginx-service-mesh
  {{- if eq .Values.environment "openshift" }}
  annotations:
    "helm.sh/resource-policy": keep
  {{- end }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spire-agent
      app.kubernetes.io/part-of: nginx-service-mesh
  template:
    metadata:
      labels:
        app.kubernetes.io/name: spire-agent
        app.kubernetes.io/part-of: nginx-service-mesh
    spec:
      serviceAccountName: spire-agent
      hostPID: true
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      initContainers:
      {{- if eq .Values.environment "openshift" }}
      - name: set-context
        image: {{ include "ubuntu.image-server" . }}ubuntu:20.04
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        command: ["chcon", "-Rt", "container_file_t", "wlapi/"]
        volumeMounts:
        - name: spire-agent-socket
          mountPath: "/wlapi"
      {{- end }}
      - name: init
        image: {{ include "hook.image-server" . }}/kubectl
        command:
        - /bin/sh
        - -c
        - |
          while $(kubectl -n {{ .Release.Namespace }} wait --for=condition=Ready pod -l app.kubernetes.io/name=spire-server > /dev/null); [ $? -ne 0 ]; do
            sleep 1
          done
      containers:
      - name: spire-agent
        image: {{ include "spire.image-server" . }}/spire-agent:1.3.0
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        args:
        - "-config"
        - "/run/spire/config/agent.conf"
        env:
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: spire-config
          mountPath: "/run/spire/config"
          readOnly: true
        - name: spire-bundle
          mountPath: "/run/spire/bundle"
        - name: spire-agent-socket
          mountPath: "/run/spire/sockets"
          readOnly: false
        - name: spire-token
          mountPath: "/var/run/secrets/tokens"
        livenessProbe:
          exec:
            command:
            - "/opt/spire/bin/spire-agent"
            - healthcheck
            - "-shallow"
            - "-socketPath"
            - "/run/spire/sockets/agent.sock"
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command:
            - "/opt/spire/bin/spire-agent"
            - healthcheck
            - "-socketPath"
            - "/run/spire/sockets/agent.sock"
          initialDelaySeconds: 5
          periodSeconds: 5
      {{ if eq .Values.environment "openshift" -}}
      - name: nginx-mesh-csi-driver
        image: {{ .Values.registry.server }}/nginx-mesh-csi-driver:{{ .Values.registry.imageTag }}
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        args:
        - "--node-id-env"
        - "MY_NODE_NAME"
        - "--wlapi-socket-dir"
        - "/wlapi"
        - "--csi-socket-path"
        - "/csi/csi.sock"
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: MY_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: spire-agent-socket
          mountPath: /wlapi
          readOnly: true
        - name: csi-socket-dir
          mountPath: /csi
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: Bidirectional
        securityContext:
          privileged: true
      - name: node-driver-registrar
        image: {{ include "node-driver.image-server" . }}/csi-node-driver-registrar:v2.5.0
        imagePullPolicy: {{ .Values.registry.imagePullPolicy }}
        args:
        - "-csi-address"
        - "/csi/csi.sock"
        - "-kubelet-registration-path"
        - "/var/lib/kubelet/plugins/agent.spire.csi.spiffe.io/csi.sock"
        volumeMounts:
        - name: csi-socket-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      {{- end }}
      volumes:
      - name: spire-config
        configMap:
          name: spire-agent
      - name: spire-bundle
        configMap:
          name: spire-bundle
      - name: spire-agent-socket
        hostPath:
          path: /run/spire/sockets
          type: DirectoryOrCreate
      {{ if eq .Values.environment "openshift" -}}
      - name: csi-socket-dir
        hostPath:
          path: /var/lib/kubelet/plugins/agent.spire.csi.spiffe.io
          type: DirectoryOrCreate
      - name: mountpoint-dir
        hostPath:
          path: /var/lib/kubelet/pods
          type: Directory
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry
          type: Directory
      {{- end }}
      - name: spire-token
        projected:
          sources:
          - serviceAccountToken:
              audience: spire-server
              expirationSeconds: 7200
              path: spire-agent
{{- if eq .Values.environment "openshift" }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:openshift:scc:nginx-mesh-spire-agent-permissions
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
  annotations:
    "helm.sh/resource-policy": keep
rules:
- apiGroups:
  - security.openshift.io
  resources:
  - securitycontextconstraints
  resourceNames:
  - nginx-mesh-spire-agent-permissions
  verbs:
  - use
- apiGroups:
  - ''
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system:openshift:scc:nginx-mesh-spire-agent-permissions
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
  annotations:
    "helm.sh/resource-policy": keep
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:openshift:scc:nginx-mesh-spire-agent-permissions
subjects:
- kind: ServiceAccount
  name: spire-agent
  namespace: {{ .Release.Namespace }}
---
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: nginx-mesh-spire-agent-permissions
  labels:
    app.kubernetes.io/part-of: nginx-service-mesh
  annotations:
    "helm.sh/resource-policy": keep
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostPID: true
allowHostNetwork: true
allowHostPorts: false
allowPrivilegedContainer: true
seLinuxContext:
  type: MustRunAs
readOnlyRootFilesystem: false
runAsUser:
  type: RunAsAny
fsGroup:
  type: MustRunAs
volumes:
- configMap
- hostPath
- projected
- secret
---
apiVersion: storage.k8s.io/v1
kind: CSIDriver
metadata:
  name: wlapi-mounter.spire.nginx.com
spec:
  attachRequired: false
  podInfoOnMount: true
  volumeLifecycleModes:
  - Ephemeral
{{- end }}
