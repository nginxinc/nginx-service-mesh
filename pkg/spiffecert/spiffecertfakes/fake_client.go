// Code generated by counterfeiter. DO NOT EDIT.
package spiffecertfakes

import (
	"context"
	"sync"

	"github.com/nginxinc/nginx-service-mesh/pkg/spiffecert"
	"github.com/spiffe/go-spiffe/v2/workloadapi"
)

type FakeClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	WatchX509ContextStub        func(context.Context, workloadapi.X509ContextWatcher) error
	watchX509ContextMutex       sync.RWMutex
	watchX509ContextArgsForCall []struct {
		arg1 context.Context
		arg2 workloadapi.X509ContextWatcher
	}
	watchX509ContextReturns struct {
		result1 error
	}
	watchX509ContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) WatchX509Context(arg1 context.Context, arg2 workloadapi.X509ContextWatcher) error {
	fake.watchX509ContextMutex.Lock()
	ret, specificReturn := fake.watchX509ContextReturnsOnCall[len(fake.watchX509ContextArgsForCall)]
	fake.watchX509ContextArgsForCall = append(fake.watchX509ContextArgsForCall, struct {
		arg1 context.Context
		arg2 workloadapi.X509ContextWatcher
	}{arg1, arg2})
	stub := fake.WatchX509ContextStub
	fakeReturns := fake.watchX509ContextReturns
	fake.recordInvocation("WatchX509Context", []interface{}{arg1, arg2})
	fake.watchX509ContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) WatchX509ContextCallCount() int {
	fake.watchX509ContextMutex.RLock()
	defer fake.watchX509ContextMutex.RUnlock()
	return len(fake.watchX509ContextArgsForCall)
}

func (fake *FakeClient) WatchX509ContextCalls(stub func(context.Context, workloadapi.X509ContextWatcher) error) {
	fake.watchX509ContextMutex.Lock()
	defer fake.watchX509ContextMutex.Unlock()
	fake.WatchX509ContextStub = stub
}

func (fake *FakeClient) WatchX509ContextArgsForCall(i int) (context.Context, workloadapi.X509ContextWatcher) {
	fake.watchX509ContextMutex.RLock()
	defer fake.watchX509ContextMutex.RUnlock()
	argsForCall := fake.watchX509ContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) WatchX509ContextReturns(result1 error) {
	fake.watchX509ContextMutex.Lock()
	defer fake.watchX509ContextMutex.Unlock()
	fake.WatchX509ContextStub = nil
	fake.watchX509ContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) WatchX509ContextReturnsOnCall(i int, result1 error) {
	fake.watchX509ContextMutex.Lock()
	defer fake.watchX509ContextMutex.Unlock()
	fake.WatchX509ContextStub = nil
	if fake.watchX509ContextReturnsOnCall == nil {
		fake.watchX509ContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.watchX509ContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.watchX509ContextMutex.RLock()
	defer fake.watchX509ContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ spiffecert.Client = new(FakeClient)
