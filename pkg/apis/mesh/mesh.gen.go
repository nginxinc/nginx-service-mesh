// Package mesh provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package mesh

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for MeshConfigAccessControlMode.
const (
	MeshConfigAccessControlModeAllow MeshConfigAccessControlMode = "allow"
	MeshConfigAccessControlModeDeny  MeshConfigAccessControlMode = "deny"
)

// Defines values for MeshConfigEnvironment.
const (
	Kubernetes MeshConfigEnvironment = "kubernetes"
	Openshift  MeshConfigEnvironment = "openshift"
)

// Defines values for MeshConfigLoadBalancingMethod.
const (
	MeshConfigLoadBalancingMethodLeastConn                  MeshConfigLoadBalancingMethod = "least_conn"
	MeshConfigLoadBalancingMethodLeastTime                  MeshConfigLoadBalancingMethod = "least_time"
	MeshConfigLoadBalancingMethodLeastTimeLastByte          MeshConfigLoadBalancingMethod = "least_time last_byte"
	MeshConfigLoadBalancingMethodLeastTimeLastByteInflight  MeshConfigLoadBalancingMethod = "least_time last_byte inflight"
	MeshConfigLoadBalancingMethodRandom                     MeshConfigLoadBalancingMethod = "random"
	MeshConfigLoadBalancingMethodRandomTwo                  MeshConfigLoadBalancingMethod = "random two"
	MeshConfigLoadBalancingMethodRandomTwoLeastConn         MeshConfigLoadBalancingMethod = "random two least_conn"
	MeshConfigLoadBalancingMethodRandomTwoLeastTime         MeshConfigLoadBalancingMethod = "random two least_time"
	MeshConfigLoadBalancingMethodRandomTwoLeastTimeLastByte MeshConfigLoadBalancingMethod = "random two least_time=last_byte"
	MeshConfigLoadBalancingMethodRoundRobin                 MeshConfigLoadBalancingMethod = "round_robin"
)

// Defines values for MeshConfigNginxErrorLogLevel.
const (
	MeshConfigNginxErrorLogLevelAlert  MeshConfigNginxErrorLogLevel = "alert"
	MeshConfigNginxErrorLogLevelCrit   MeshConfigNginxErrorLogLevel = "crit"
	MeshConfigNginxErrorLogLevelDebug  MeshConfigNginxErrorLogLevel = "debug"
	MeshConfigNginxErrorLogLevelEmerg  MeshConfigNginxErrorLogLevel = "emerg"
	MeshConfigNginxErrorLogLevelError  MeshConfigNginxErrorLogLevel = "error"
	MeshConfigNginxErrorLogLevelInfo   MeshConfigNginxErrorLogLevel = "info"
	MeshConfigNginxErrorLogLevelNotice MeshConfigNginxErrorLogLevel = "notice"
	MeshConfigNginxErrorLogLevelWarn   MeshConfigNginxErrorLogLevel = "warn"
)

// Defines values for MeshConfigNginxLogFormat.
const (
	MeshConfigNginxLogFormatDefault MeshConfigNginxLogFormat = "default"
	MeshConfigNginxLogFormatJson    MeshConfigNginxLogFormat = "json"
)

// Defines values for MtlsConfigCaKeyType.
const (
	EcP256  MtlsConfigCaKeyType = "ec-p256"
	EcP384  MtlsConfigCaKeyType = "ec-p384"
	Rsa2048 MtlsConfigCaKeyType = "rsa-2048"
	Rsa4096 MtlsConfigCaKeyType = "rsa-4096"
)

// Defines values for MtlsConfigMode.
const (
	Off        MtlsConfigMode = "off"
	Permissive MtlsConfigMode = "permissive"
	Strict     MtlsConfigMode = "strict"
)

// Defines values for PatchConfigFieldAccessControlMode.
const (
	PatchConfigFieldAccessControlModeAllow PatchConfigFieldAccessControlMode = "allow"
	PatchConfigFieldAccessControlModeDeny  PatchConfigFieldAccessControlMode = "deny"
)

// Defines values for PatchConfigFieldLoadBalancingMethod.
const (
	PatchConfigFieldLoadBalancingMethodLeastConn                  PatchConfigFieldLoadBalancingMethod = "least_conn"
	PatchConfigFieldLoadBalancingMethodLeastTime                  PatchConfigFieldLoadBalancingMethod = "least_time"
	PatchConfigFieldLoadBalancingMethodLeastTimeLastByte          PatchConfigFieldLoadBalancingMethod = "least_time last_byte"
	PatchConfigFieldLoadBalancingMethodLeastTimeLastByteInflight  PatchConfigFieldLoadBalancingMethod = "least_time last_byte inflight"
	PatchConfigFieldLoadBalancingMethodRandom                     PatchConfigFieldLoadBalancingMethod = "random"
	PatchConfigFieldLoadBalancingMethodRandomTwo                  PatchConfigFieldLoadBalancingMethod = "random two"
	PatchConfigFieldLoadBalancingMethodRandomTwoLeastConn         PatchConfigFieldLoadBalancingMethod = "random two least_conn"
	PatchConfigFieldLoadBalancingMethodRandomTwoLeastTime         PatchConfigFieldLoadBalancingMethod = "random two least_time"
	PatchConfigFieldLoadBalancingMethodRandomTwoLeastTimeLastByte PatchConfigFieldLoadBalancingMethod = "random two least_time=last_byte"
	PatchConfigFieldLoadBalancingMethodRoundRobin                 PatchConfigFieldLoadBalancingMethod = "round_robin"
)

// Defines values for PatchConfigFieldNginxErrorLogLevel.
const (
	PatchConfigFieldNginxErrorLogLevelAlert  PatchConfigFieldNginxErrorLogLevel = "alert"
	PatchConfigFieldNginxErrorLogLevelCrit   PatchConfigFieldNginxErrorLogLevel = "crit"
	PatchConfigFieldNginxErrorLogLevelDebug  PatchConfigFieldNginxErrorLogLevel = "debug"
	PatchConfigFieldNginxErrorLogLevelEmerg  PatchConfigFieldNginxErrorLogLevel = "emerg"
	PatchConfigFieldNginxErrorLogLevelError  PatchConfigFieldNginxErrorLogLevel = "error"
	PatchConfigFieldNginxErrorLogLevelInfo   PatchConfigFieldNginxErrorLogLevel = "info"
	PatchConfigFieldNginxErrorLogLevelNotice PatchConfigFieldNginxErrorLogLevel = "notice"
	PatchConfigFieldNginxErrorLogLevelWarn   PatchConfigFieldNginxErrorLogLevel = "warn"
)

// Defines values for PatchConfigFieldNginxLogFormat.
const (
	PatchConfigFieldNginxLogFormatDefault PatchConfigFieldNginxLogFormat = "default"
	PatchConfigFieldNginxLogFormatJson    PatchConfigFieldNginxLogFormat = "json"
)

// Defines values for PatchConfigOp.
const (
	Add     PatchConfigOp = "add"
	Remove  PatchConfigOp = "remove"
	Replace PatchConfigOp = "replace"
)

// APIConfig The configuration of the NGINX Service Mesh API.
type APIConfig struct {
	// Address The Kubernetes DNS name of the NGINX Service Mesh API.
	Address string `json:"address"`

	// ContainerPort The container port of the NGINX Service Mesh API.
	ContainerPort int `json:"containerPort"`

	// Port The port of the NGINX Service Mesh API.
	Port int `json:"port"`
}

// ErrorDetail defines model for ErrorDetail.
type ErrorDetail struct {
	// Description A detailed error message returned by the server.
	//
	// These messages contain the following information, where applicable:
	//
	// - What happened.
	// - Why it happened.
	// - What the consequences are (if any).
	// - Recommended action to take to resolve the issue.
	Description string `json:"description"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	// Code A numeric error code that can be used to identify errors for support purposes.
	Code    int            `json:"code"`
	Details *[]ErrorDetail `json:"details,omitempty"`

	// Message A human-readable message, in English, that describes the error.
	Message string `json:"message"`
}

// ExportersConfig The configuration of exporters to send telemetry data to.
type ExportersConfig struct {
	// Otlp The configuration for an OTLP gRPC exporter.
	Otlp *OtlpExporterConfig `json:"otlp,omitempty"`
}

// Image A container image, comprised of an image name and image tag.
type Image struct {
	// Image The tag of the image.
	Image string `json:"image"`

	// Name The name of the image.
	Name string `json:"name"`
}

// MeshConfig Holds combined configuration required to run the NGINX Service Mesh control plane
// and the data plane.
type MeshConfig struct {
	// AccessControlMode The access control mode of NGINX Service Mesh.
	AccessControlMode MeshConfigAccessControlMode `json:"accessControlMode"`

	// Api The configuration of the NGINX Service Mesh API.
	Api APIConfig `json:"api"`

	// AutoInjectorPort The port that the automatic injection webhook binds to.
	AutoInjectorPort int `json:"autoInjectorPort"`

	// ClientMaxBodySize The maximum allowed size of the client request body.
	ClientMaxBodySize string `json:"clientMaxBodySize"`

	// EnabledNamespaces A list of namespaces where automatic injection is enabled. To set this field, the isAutoInjectEnabled field must be false.
	EnabledNamespaces *[]string `json:"enabledNamespaces,omitempty"`

	// Environment The environment that the NGINX Service Mesh control plane is installed in.
	Environment MeshConfigEnvironment `json:"environment"`

	// IsAutoInjectEnabled Whether or not automatic injection of the NGINX Service Mesh sidecar is enabled globally.
	IsAutoInjectEnabled *bool `json:"isAutoInjectEnabled,omitempty"`

	// IsUDPEnabled Enable UDP traffic proxying.
	IsUDPEnabled bool `json:"isUDPEnabled"`

	// LoadBalancingMethod The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
	LoadBalancingMethod MeshConfigLoadBalancingMethod `json:"loadBalancingMethod"`

	// Mtls The configuration for mTLS.
	Mtls MtlsConfig `json:"mtls"`

	// Namespace The namespace where the NGINX Service Mesh control plane is installed.
	Namespace string `json:"namespace"`

	// NginxErrorLogLevel The error log level of the NGINX Service Mesh sidecar proxies.
	NginxErrorLogLevel MeshConfigNginxErrorLogLevel `json:"nginxErrorLogLevel"`

	// NginxLogFormat The log format of the NGINX Service Mesh sidecar proxies.
	NginxLogFormat MeshConfigNginxLogFormat `json:"nginxLogFormat"`

	// PrometheusAddress The address of the Prometheus server deployment.
	PrometheusAddress string `json:"prometheusAddress"`

	// Proxy The configuration of the NGINX Service Mesh sidecar proxies.
	Proxy ProxyConfig `json:"proxy"`

	// RegistryKeyName The name of the registry key that is used to pull the NGINX Service Mesh docker images.
	RegistryKeyName string `json:"registryKeyName"`

	// SidecarImage A container image, comprised of an image name and image tag.
	SidecarImage Image `json:"sidecarImage"`

	// SidecarInitImage A container image, comprised of an image name and image tag.
	SidecarInitImage Image `json:"sidecarInitImage"`

	// Telemetry The configuration for telemetry.
	Telemetry TelemetryConfig `json:"telemetry"`

	// TrustDomain The trust domain of the NGINX Service Mesh.
	TrustDomain string `json:"trustDomain"`
}

// MeshConfigAccessControlMode The access control mode of NGINX Service Mesh.
type MeshConfigAccessControlMode string

// MeshConfigEnvironment The environment that the NGINX Service Mesh control plane is installed in.
type MeshConfigEnvironment string

// MeshConfigLoadBalancingMethod The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
type MeshConfigLoadBalancingMethod string

// MeshConfigNginxErrorLogLevel The error log level of the NGINX Service Mesh sidecar proxies.
type MeshConfigNginxErrorLogLevel string

// MeshConfigNginxLogFormat The log format of the NGINX Service Mesh sidecar proxies.
type MeshConfigNginxLogFormat string

// MtlsConfig The configuration for mTLS.
type MtlsConfig struct {
	// CaKeyType The key type used for the SPIRE Server CA.
	CaKeyType *MtlsConfigCaKeyType `json:"caKeyType,omitempty"`

	// CaTTL The CA/signing key TTL in hours(h). Min value 24h. Max value 999999h.
	CaTTL *string `json:"caTTL,omitempty"`

	// Mode The mTLS mode of NGINX Service Mesh.
	Mode *MtlsConfigMode `json:"mode,omitempty"`

	// SvidTTL The TTL of certificates issued to workloads in hours(h) or minutes(m). Max value is 999999.
	SvidTTL *string `json:"svidTTL,omitempty"`
}

// MtlsConfigCaKeyType The key type used for the SPIRE Server CA.
type MtlsConfigCaKeyType string

// MtlsConfigMode The mTLS mode of NGINX Service Mesh.
type MtlsConfigMode string

// OtlpExporterConfig The configuration for an OTLP gRPC exporter.
type OtlpExporterConfig struct {
	// Host The host of the OpenTelemetry gRPC exporter to connect to.
	Host string `json:"host"`

	// Port The port of the OpenTelemetry gRPC exporter to connect to.
	Port int `json:"port"`
}

// PatchConfig The configuration object that holds the updates to be made to the NGINX Service Mesh configuration.
type PatchConfig struct {
	Field struct {
		// AccessControlMode The access control mode of NGINX Service Mesh.
		AccessControlMode *PatchConfigFieldAccessControlMode `json:"accessControlMode,omitempty"`

		// ClientMaxBodySize The maximum allowed size of the client request body.
		ClientMaxBodySize *string `json:"clientMaxBodySize,omitempty"`

		// EnabledNamespaces A list of namespaces where automatic injection is enabled. To set this field, the isAutoInjectEnabled field must be false.
		EnabledNamespaces *[]string `json:"enabledNamespaces,omitempty"`

		// IsAutoInjectEnabled Whether or not automatic injection of the NGINX Service Mesh sidecar is enabled. This value can be overridden on a per-Pod basis with a Pod annotation.
		IsAutoInjectEnabled *bool `json:"isAutoInjectEnabled,omitempty"`

		// LoadBalancingMethod The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
		LoadBalancingMethod *PatchConfigFieldLoadBalancingMethod `json:"loadBalancingMethod,omitempty"`

		// Mtls The configuration for mTLS.
		Mtls *MtlsConfig `json:"mtls,omitempty"`

		// NginxErrorLogLevel The error log level of the NGINX Service Mesh sidecar proxies.
		NginxErrorLogLevel *PatchConfigFieldNginxErrorLogLevel `json:"nginxErrorLogLevel,omitempty"`

		// NginxLogFormat The log format of the NGINX Service Mesh sidecar proxies.
		NginxLogFormat *PatchConfigFieldNginxLogFormat `json:"nginxLogFormat,omitempty"`

		// PrometheusAddress The address of the Prometheus server. Must be reachable from the Kubernetes cluster that NGINX Service Mesh is installed in.
		PrometheusAddress *string `json:"prometheusAddress,omitempty"`

		// Telemetry The configuration for telemetry.
		Telemetry *TelemetryConfig `json:"telemetry,omitempty"`
	} `json:"field"`

	// Op The type of operation to be performed on the NGINX Service Mesh configuration. Values in the NGINX Service Mesh configuration can be added, removed, or replaced.
	Op PatchConfigOp `json:"op"`
}

// PatchConfigFieldAccessControlMode The access control mode of NGINX Service Mesh.
type PatchConfigFieldAccessControlMode string

// PatchConfigFieldLoadBalancingMethod The global load balancing method for Services in NGINX Service Mesh. This value can be overridden on a per-Service basis with a Service annotation.
type PatchConfigFieldLoadBalancingMethod string

// PatchConfigFieldNginxErrorLogLevel The error log level of the NGINX Service Mesh sidecar proxies.
type PatchConfigFieldNginxErrorLogLevel string

// PatchConfigFieldNginxLogFormat The log format of the NGINX Service Mesh sidecar proxies.
type PatchConfigFieldNginxLogFormat string

// PatchConfigOp The type of operation to be performed on the NGINX Service Mesh configuration. Values in the NGINX Service Mesh configuration can be added, removed, or replaced.
type PatchConfigOp string

// PortsConfig The ports that the NGINX Service Mesh sidecar proxies listen on.
type PortsConfig struct {
	// Incoming The incoming HTTP port.
	Incoming int `json:"incoming"`

	// IncomingGrpc The incoming gRPC port.
	IncomingGrpc int `json:"incomingGrpc"`

	// IncomingGrpcPermissive The incoming gRPC port when the mTLS mode of the sidecar proxy is set to permissive.
	IncomingGrpcPermissive int `json:"incomingGrpcPermissive"`

	// IncomingNotInKeyval The incoming port that handles requests from Services not in the NGINX Service Mesh.
	IncomingNotInKeyval int `json:"incomingNotInKeyval"`

	// IncomingPermissive The incoming HTTP port when the mTLS mode of the sidecar proxy is set to permissive.
	IncomingPermissive int `json:"incomingPermissive"`

	// IncomingRedirect The incoming redirect port. This port redirects requests to another port on the sidecar proxy based on the protocol of the request.
	IncomingRedirect int `json:"incomingRedirect"`

	// IncomingTcp The incoming TCP port.
	IncomingTcp int `json:"incomingTcp"`

	// IncomingTcpDeny The incoming TCP deny port. This port denies TCP traffic if it is not a part of NGINX Service Mesh or if the access to the sidecar is not allowed.
	IncomingTcpDeny int `json:"incomingTcpDeny"`

	// IncomingTcpPermissive The incoming TCP port when the mTLS mode of the sidecar proxy is set to perissive.
	IncomingTcpPermissive int `json:"incomingTcpPermissive"`

	// IncomingUdp The incoming UDP port.
	IncomingUdp int `json:"incomingUdp"`

	// Metrics The Prometheus metrics port.
	Metrics int `json:"metrics"`

	// Outgoing The outgoing HTTP port.
	Outgoing int `json:"outgoing"`

	// OutgoingDefaultEgress The outgoing traffic port for egress traffic when the NGINX Plus Ingress Controller is deployed as an egress controller.
	OutgoingDefaultEgress int `json:"outgoingDefaultEgress"`

	// OutgoingGrpc The outgoing gRPC port.
	OutgoingGrpc int `json:"outgoingGrpc"`

	// OutgoingNotInKeyval The outgoing port for destinations that are not a part of NGINX Service Mesh.
	OutgoingNotInKeyval int `json:"outgoingNotInKeyval"`

	// OutgoingRedirect The outgoing redirect port. This port redirects requests to another port on the sidecar proxy based on the protocol of the request.
	OutgoingRedirect int `json:"outgoingRedirect"`

	// OutgoingTcp The outgoing TCP port.
	OutgoingTcp int `json:"outgoingTcp"`

	// OutgoingUdp The outgoing UDP port.
	OutgoingUdp int `json:"outgoingUdp"`

	// PlusApi The port for the NGINX Plus API. This API is not accessible outside of the NGINX Service Mesh sidecar container.
	PlusApi int `json:"plusApi"`

	// RedirectHealthPort This port redirects HTTP health probes to the application container.
	RedirectHealthPort int `json:"redirectHealthPort"`

	// RedirectHealthPortHTTPS This port redirects HTTPS health probes to the application container.
	RedirectHealthPortHTTPS int `json:"redirectHealthPortHTTPS"`
}

// ProxyConfig The configuration of the NGINX Service Mesh sidecar proxies.
type ProxyConfig struct {
	// Ports The ports that the NGINX Service Mesh sidecar proxies listen on.
	Ports PortsConfig `json:"ports"`

	// Transparent Whether or not the NGINX Service Mesh sidecar proxies are running in transparent mode. Transparent mode means that the sidecar proxies are passing the traffic through to the destination without applying any rules to the traffic.
	Transparent bool `json:"transparent"`
}

// TelemetryConfig The configuration for telemetry.
type TelemetryConfig struct {
	// Exporters The configuration of exporters to send telemetry data to.
	Exporters *ExportersConfig `json:"exporters,omitempty"`

	// SamplerRatio The percentage of traces that are processed and exported to the telemetry backend.
	SamplerRatio *float32 `json:"samplerRatio,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = ErrorModel

// Forbidden defines model for Forbidden.
type Forbidden = ErrorModel

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorModel

// Unauthorized defines model for Unauthorized.
type Unauthorized = ErrorModel

// PatchConfigJSONBody defines parameters for PatchConfig.
type PatchConfigJSONBody struct {
	union json.RawMessage
}

// PatchConfigJSONBody1 defines parameters for PatchConfig.
type PatchConfigJSONBody1 = []PatchConfig

// PatchConfigJSONRequestBody defines body for PatchConfig for application/json ContentType.
type PatchConfigJSONRequestBody PatchConfigJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConfig request
	GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchConfig request with any body
	PatchConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchConfig(ctx context.Context, body PatchConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchConfig(ctx context.Context, body PatchConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchConfigRequest calls the generic PatchConfig builder with application/json body
func NewPatchConfigRequest(server string, body PatchConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewPatchConfigRequestWithBody generates requests for PatchConfig with any type of body
func NewPatchConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConfig request
	GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// PatchConfig request with any body
	PatchConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConfigResponse, error)

	PatchConfigWithResponse(ctx context.Context, body PatchConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConfigResponse, error)
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeshConfig
	JSON401      *ErrorModel
	JSON403      *ErrorModel
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MeshConfig
	JSON400      *ErrorModel
	JSON401      *ErrorModel
	JSON403      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PatchConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// PatchConfigWithBodyWithResponse request with arbitrary body returning *PatchConfigResponse
func (c *ClientWithResponses) PatchConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchConfigResponse, error) {
	rsp, err := c.PatchConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConfigResponse(rsp)
}

func (c *ClientWithResponses) PatchConfigWithResponse(ctx context.Context, body PatchConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchConfigResponse, error) {
	rsp, err := c.PatchConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchConfigResponse(rsp)
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeshConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchConfigResponse parses an HTTP response from a PatchConfigWithResponse call
func ParsePatchConfigResponse(rsp *http.Response) (*PatchConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MeshConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get NGINX Service Mesh configuration
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Update NGINX Service Mesh Configuration
	// (PATCH /config)
	PatchConfig(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// PatchConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PatchConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchConfig(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.PATCH(baseURL+"/config", wrapper.PatchConfig)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
